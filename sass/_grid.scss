@use 'sass:math';

$grid-counts: 12;
$grid-gaps: (
    "0": 0,
    "1": 1rem,
    "2": 2rem,
    "3": 3rem
);

$layout-values: flex-start, flex-end, center, space-between, space-around;

.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 10px;
    box-sizing: border-box;
}

.row {
    display: flex;
    flex-flow: row wrap;
}

@include breakpoints() {
    @for $i from 1 through $grid-counts {
        .col-xs-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-counts);
        }
    }
}


@include breakpoints($sm) {
    @for $i from 1 through $grid-counts {
        .col-sm-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-counts);
        }
    }
}


@include breakpoints($md) {
    @for $i from 1 through $grid-counts {
        .col-md-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-counts);
        }
    }
}


@include breakpoints($lg) {
    @for $i from 1 through $grid-counts {
        .col-lg-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-counts);
        }
    }
}


@include breakpoints($xl) {
    @for $i from 1 through $grid-counts {
        .col-xl-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-counts);
        }
    }
}

@each $key, $value in $grid-gaps {
    .gap-#{$key} > * {
        padding: $value;
    }
}

@each $value in $layout-values {
    .justify-#{$value} {
        justify-content: $value;
    }
}